20210202

사용자 전체리스트 개발 완료

사용자 페이징 처리	
페이징 처리를 위해 필요한 값

1. 정렬기준 userid
2. 페이지 사이즈
3. 페이지

user/paginUser ==> 페이지, 페이지사이즈 파라미터를 보내지 않음
					페이지, 페이지 사이즈 파라미터 

	<select id="selectPagingUser" resultType="userVo"
		parameterType="pageVo">
		SELECT *
		FROM
		(SELECT ROWNUM rn , a.*
		FROM
		(SELECT *
		FROM
		users
		ORDER BY userid) a
		WHERE ROWNUM &lt;= #{page} * #{pageSize})
		WHERE
		rn BETWEEN (#{page} - 1) *
		#{pageSize} + 1 AND #{page} * #{pageSize}
	</select>
	
	
	
	
@RequestParam
**메소드 인자에서 사용 가능한 어노테이션
	1.바인딩 될 파라미터 설정(name)
	파라미터 명과 메소드 인자 명이 다를 경우 자동바인딩이 되지 않는 문제를 해결
	파라미터명을 명시함으로써 메소드 인자에 자동 바인딩 될수 있도로거 설정
	
	2. 파라미터가 존재하지 않을 경우 기본값 설정 (defaultValue)
	파라미터가 존재하지 않을 경우, 메소드 인자를 primitive type으로 선언한 경우 에러 발생
	==> defaultValue 설정으로 에러 방지 가능
	
	3.파라미터 존재 여부 설정()required, 기본값 true)
	파라미터가 반드시 필요한지 여부를 설정
	단 defaultValue 설정시 자동으로 false로 설정됨/.



@ModelAttribute
1. 메소드
	@RequestMapping 어노테이션이 붙은 메소드가 실행되기전 먼저 실행되고
	해당 메소드가 리턴하는 값을 Model객체에 넣어준다.
	
	@ModelAttribute
	public List<String> rangers(){
		......
		return list;
	}
	
	@REquestMapping("list")
	public String view(Model model){
		return "view";
	}
	
	localhost/user/list ==> 호출순서 rangers() ==> model ==> list
	localhost/user/list2 ==> 호출순서 rangers() ==> model ==> list2
	이는
	@Before ==> @Test
	@Before ==> @Test
	@Before ==> @Test
	과 비슷
	
	
2.파라미터 인자
Model 객체에 저장된 속성을 파라미터 인자에 바인딩 가능

commond 객체의 경우 @ModelAttribute 어노테이션을 적용하지 ㅇ낳더라도
model 객체에 자동으로 등록이 된다.



@SessionAttribute
class에 적용

@ModelAttribute가 적용된 메소드가 @RequestMapping이 적용된 메소드 실행전 
항상 호출되는 부하를 줄이는 것이 목적
최초1회에 대해서는 @ModelAttribute가 적용된 메소드를 호출하여 해당 속성 값을 세션에 적용
그 이후 호출에 대해서는 세션에 저장된 값을 사용하여 
@ModelAttribute 메소드가 적용된 로직이 반복 호출 되는 것을 방지 ==> cache


@PathVariable : uri의 일부를 메소드 인자로 바인딩
1. @ResustMapping Path 설정시 어떤 부분을 가져올지 표현
	==> @RequestMapping("hello/{path}")
2.메소드 인자에 @PathVariable을 통해 가자올 값을 바인딩
	public String view(@PathVariable("path") String Path)
	
	
	
@RequestParam : 파라미터를 메소드 인자로 바인딩 할때
@RequestHeader : 헤더 정보를 메소드 인자로 바인딩 할때


파일 업로드시 작업내역
1.서블릿
	.form 태그 enctype = "multipart/form-data"
	.form 태그 method= "post"
	. 서블릿 @MultipartConfig
	
	파일 정보 : Part part = request.getPart()
	
2.Spring
	.form 태그 enctype = "multipart/form-data"
	.form 태그 method= "post"
	**** multipartResolver 라는 스프링 빈 등록 CommonsMultipartResolver << 정해져 있다.
	
	부모에다 해도되지만 자식에서 하는게 좋다_
	
	파일 정보 : MulfipartFile
		
	
	


@RequestPart - 파일 업로드 ; @RequestParam 과 유사

복수파라미터 전송
메소드 인자로 List==> List<String> 인자 x
메소드 인자로 배열 ==> String[] 인자 o
메소드 인자로 리스트를 필드로 하는 command 객체 ==> UserVo userVo O
public UserVo {
	private List<String> userids;
	private List<String> usernms;
}
usersVo 생성




스프링 MVC 실습
1. 사용자 상세페이지 (제외사항 : 사용자 사진, 엑스박스 표현 상관 없음
2. 사용자 수정 페이지 (파일 업로드까지 전체 이관)
3. 사용자 등록 페이지 (파일 업로드까지 전체 이관)
4. 사용자 삭제 기능 (전체 이관)






