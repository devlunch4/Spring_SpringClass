20210201

앞으로 테스트 코드 작성 방법
controller ==>	1. webTestConfig 클래스를 상속 받는 junit 클래스를 생성
				2. mockMvc 객체를 이용하여 테스트 코드 작성
				
service,repository ==> 1. MoelTestConfig 클래스를 상속 받는 junit 클래스를 생성
						2. 테스트 대상 스프링 빈을 주입 받아 테스트 코드 작성



실습----
login 기능 마이그레이션


jsp 프로젝트에서 localhost/login.jsp ==> model1 ==> model2
1.로그인 화면 요청
		.jsp 위치 (webapp/.... ==> webapp/WEB-INF/views)
				commons/header.jsp, left.jsp. common_lib.jsp)
				webapp/login.jsp ==> webapp/WEB-INF/views/login.jsp
				webapp/common/*.jsp ==> webapp/WEB-INF/views/common/*.jsp
>>즉 파일 이동


---2교시
login 화면 요청 처리 controller ---spring작업
1, kr.or.ddit.login.LoginController 생성
2. @Controller 등록
3. @@RequestMapping ==> class, method?
	기존: @WebServlet("/loginController")
	변경: login/view ++ > localhost/login/view

4. method 구현(login.jsp forward)
	>>해당 요청을 처리하기 위해서 파라미터가 필요한가? ==> 필요 없음 
	
	*요청 위임(Servlet)
	req.getRequestDispatcher("login.jsp").forward(req, resp);
	
	*요청 위임(Spring)
	메소드 반환 문자열 (view name)
	/WEB-INF/views/ +메소드 반환 뷰네임+ .jsp
	/WEB-INF/views/login.jsp
5.테스트 코드 구현



---3교시

controller 테스트 코드 구현시 사용하는 메소드
		.perform 
		get(), post(), fileUpLoad()
		param("파라미터명","파라미터값")
		
		.andExpect
			status(), model(), view()
			
		.andReturn() => MvcResult 객체를 반환
						ModelAndView mav = mvcResult.getModelAndView();
		.andDo() ==> 부가적 작업 (결과 출력)

		
>>>파라미터가 있는 스프링 메소드
LoginController : 로그인 요청 처리 메소드 개발
1. userVo 준비 (작성 안판 필드 추가)
2. webapp/main.jsp ==> webapp/WEb-INF/views/main.jsp 로 복사
3. 로그인 처리 로직 작성(메소드)
		3-1 파라미터 작업
			기존 : request.getParameter("userid")
			==>
			1. 파라미터가 몇개 없어서 value object를 사용하지 않는 경우
				스프링 컨트롤러 메소드에 파라미터와 동일한 이름의 인자를 선언
				스프링 mvc 모듈에서 requset 객체의 파라미터를 메소드 인자로 자동 바인딩 한다.
			2. 파라미터를 담을 value object가 있는 경우
				value object를 스프링 메소드 인자로 선언
				파라미터 이름과 value object 필드의 이름이 동일한 경우 자동으로 바인딩
			
		3-2 로그인 성공시
			세션객체에 S_USER 속성으로 사용자 정보를 vo객체를 저장
			
			기존: HttpSession session= request.getSession();
				session.setAttribute("S_USER", userVo>;
			==>	
			
		3-3 로그인 실패시
		login.jsp로 리다이랙트
		
		기존 : response sendRedirect("/login.jsp");
		==>
		