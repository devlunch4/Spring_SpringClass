20210202

사용자 전체리스트 개발 완료

사용자 페이징 처리	
페이징 처리를 위해 필요한 값

1. 정렬기준 userid
2. 페이지 사이즈
3. 페이지

user/paginUser ==> 페이지, 페이지사이즈 파라미터를 보내지 않음
					페이지, 페이지 사이즈 파라미터 

	<select id="selectPagingUser" resultType="userVo"
		parameterType="pageVo">
		SELECT *
		FROM
		(SELECT ROWNUM rn , a.*
		FROM
		(SELECT *
		FROM
		users
		ORDER BY userid) a
		WHERE ROWNUM &lt;= #{page} * #{pageSize})
		WHERE
		rn BETWEEN (#{page} - 1) *
		#{pageSize} + 1 AND #{page} * #{pageSize}
	</select>
	
	
	
	
@RequestParam
**메소드 인자에서 사용 가능한 어노테이션
	1.바인딩 될 파라미터 설정(name)
	파라미터 명과 메소드 인자 명이 다를 경우 자동바인딩이 되지 않는 문제를 해결
	파라미터명을 명시함으로써 메소드 인자에 자동 바인딩 될수 있도로거 설정
	
	2. 파라미터가 존재하지 않을 경우 기본값 설정 (defaultValue)
	파라미터가 존재하지 않을 경우, 메소드 인자를 primitive type으로 선언한 경우 에러 발생
	==> defaultValue 설정으로 에러 방지 가능
	
	3.파라미터 존재 여부 설정()required, 기본값 true)
	파라미터가 반드시 필요한지 여부를 설정
	단 defaultValue 설정시 자동으로 false로 설정됨/.



@ModelAttribute
1. 메소드
	@RequestMapping 어노테이션이 붙은 메소드가 실행되기전 먼저 실행되고
	해당 메소드가 리턴하는 값을 Model객체에 넣어준다.
	
	@ModelAttribute
	public List<String> rangers(){
		......
		return list;
	}
	
	@REquestMapping("list")
	public String view(Model model){
		return "view";
	}
	
	localhost/user/list ==> 호출순서 rangers() ==> model ==> list
	localhost/user/list2 ==> 호출순서 rangers() ==> model ==> list2
	이는
	@Before ==> @Test
	@Before ==> @Test
	@Before ==> @Test
	과 비슷
	
	

2.
